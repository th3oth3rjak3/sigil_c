// File:    bytecode.h
// Purpose: A structure to define information about generated bytecode.
// Author:  Jake Hathaway
// Date:    2025-08-17

#pragma once

#include "include/memory.h"
#include "include/value.h"
#include <stdint.h>

/// Bytecode represents compiled bytecode instructions.
typedef struct {
    int        count;     // The count of instructions in the code array.
    int        capacity;  // The amount of total elements available.
    uint16_t*  code;      // A dynamic array of bytecode instructions.
    ValueArray constants; // A dynamic array of compile time constants
    int*       lines;     // The line numbers of each bytecode op.
} Bytecode;

/// Initialize a bytecode structure with default values.
///
/// Params:
/// - bytecode: The bytecode structure to initialize.
void
init_bytecode(Bytecode* bytecode);

/// Free the resources for the bytecode structure.
///
/// Params:
/// - allocator: The allocator to use for freeing.
/// - bytecode: The bytecode structure to free.
void
free_bytecode(Allocator allocator, Bytecode* bytecode);

/// Write some operation to the bytecode.
///
/// Params:
/// - allocator: The allocator used for managing memory operations.
/// - bytecode: The bytecode structure to write the operation to.
/// - word: The 16 bit unsigned integer to write to the bytecode.
void
write_bytecode(
    Allocator allocator, Bytecode* bytecode, uint16_t word, int line);

/// Write a copmile time constant value to the bytecode constants array.
///
/// Params:
/// - allocator: The allocator needed to allocate additional memory.
/// - bytecode: The bytecode structure to write the constant value to.
/// - value: The value to write to the bytecode constants array.
///
/// Returns:
/// - int: The index of the added constant.
int
write_constant(Allocator allocator, Bytecode* bytecode, Value value);
