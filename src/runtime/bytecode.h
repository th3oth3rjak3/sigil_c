// File:    bytecode.h
// Purpose: A structure to define information about generated bytecode.
// Author:  Jake Hathaway
// Date:    2025-08-17

#pragma once

#include "value.h"
#include <stdint.h>

/// OpCode represents a runtime bytecode instruction.
typedef enum {
    OP_CONSTANT,      // Load constant.
    OP_NIL,           // No value
    OP_TRUE,          // Literal true
    OP_FALSE,         // Literal false
    OP_POP,           // Pop a value off of the stack
    OP_GET_LOCAL,     // Get a local variable.
    OP_SET_LOCAL,     // Set a local variable.
    OP_DEFINE_GLOBAL, // Define a global variable.
    OP_GET_GLOBAL,    // Fetch a global variable.
    OP_SET_GLOBAL,    // Set a global variable.
    OP_GET_UPVALUE,   // Get an upvalue
    OP_SET_UPVALUE,   // Set an upvalue
    OP_EQUAL,         // Equality comparison
    OP_GREATER,       // Greater comparison
    OP_LESS,          // Less comparison
    OP_ADD,           // Add two operands.
    OP_SUBTRACT,      // Subtract two operands.
    OP_MULTIPLY,      // Multiply two operands.
    OP_DIVIDE,        // Divide two operands.
    OP_NOT,           // Logical Negation (!true -> false)
    OP_NEGATE,        // Negate an operand (2 -> -2)
    OP_PRINT,         // Print to the console.
    OP_JUMP,          // Jump unconditionally.
    OP_JUMP_IF_FALSE, // Jump if the condition is false.
    OP_LOOP,          // Loop instruction
    OP_CALL,          // Call a function
    OP_CLOSURE,       // Handle a closure.
    OP_CLOSE_UPVALUE, // Close an upvalue (move to heap).
    OP_CLASS,         // Create a class.
    OP_GET_PROPERTY,  // Get a class instance property.
    OP_SET_PROPERTY,  // Set a class instance property.
    OP_RETURN,        // Return from function call.
} OpCode;

/// Bytecode represents compiled bytecode instructions.
typedef struct {
    int        count;     // The count of instructions in the code array.
    int        capacity;  // The amount of total elements available.
    uint16_t*  code;      // A dynamic array of bytecode instructions.
    ValueArray constants; // A dynamic array of compile time constants
    int*       lines;     // The line numbers of each bytecode op.
} Bytecode;

/// Initialize a bytecode structure with default values.
///
/// Params:
/// - bytecode: The bytecode structure to initialize.
void
init_bytecode(Bytecode* bytecode);

/// Free the resources for the bytecode structure.
///
/// Params:
/// - bytecode: The bytecode structure to free.
void
free_bytecode(Bytecode* bytecode);

/// Write some operation to the bytecode.
///
/// Params:
/// - bytecode: The bytecode structure to write the operation to.
/// - word: The 16 bit unsigned integer to write to the bytecode.
void
write_bytecode(Bytecode* bytecode, uint16_t word, int line);

/// Write a copmile time constant value to the bytecode constants array.
///
/// Params:
/// - bytecode: The bytecode structure to write the constant value to.
/// - value: The value to write to the bytecode constants array.
///
/// Returns:
/// - int: The index of the added constant.
int
write_constant(Bytecode* bytecode, Value value);
